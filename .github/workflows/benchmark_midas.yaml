on:
  push:
    branches:
      - benchmark_midas

name: benchmark_midas

jobs:
  benchmark:
    runs-on: ubuntu-18.04
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: '4.0.0' 

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install libs
        run: sudo apt-get install libcurl4-openssl-dev libgit2-dev libnlopt-dev

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          install.packages(c("devtools", "BiocManager"))
          BiocManager::install(c("SummarizedExperiment", "S4Vectors", "MultiAssayExperiment"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: generate test hla_calls
        run: |
          Rscript inst/benchmark/simulateHlaCalls.R inst/benchmark/hla_calls_ABC A B C
          Rscript inst/benchmark/simulateHlaCalls.R inst/benchmark/hla_calls_ABCDMADMB A B C DMA DMB

      - name: benchmark prepareMiDAS_hla_alleles
        run: |
          script="inst/benchmark/prepareMiDAS_hla_alleles.R"
          in_prefix="inst/benchmark/hla_calls_ABC"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/prepareMiDAS_hla_alleles_3_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done
          in_prefix="inst/benchmark/hla_calls_ABCDMADMB"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/prepareMiDAS_hla_alleles_5_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done

      - name: benchmark prepareMiDAS_hla_aa
        run: |
          script="inst/benchmark/prepareMiDAS_hla_aa.R"
          in_prefix="inst/benchmark/hla_calls_ABC"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/prepareMiDAS_hla_aa_3_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done
          in_prefix="inst/benchmark/hla_calls_ABCDMADMB"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/prepareMiDAS_hla_aa_5_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done

      - name: benchmark hla_alleles pipeline
        run: |
          script="inst/benchmark/workflow_hla_alleles.R"
          in_prefix="inst/benchmark/hla_calls_ABC"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/workflow_hla_alleles_3_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done
          in_prefix="inst/benchmark/hla_calls_ABCDMADMB"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/workflow_hla_alleles_5_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done

      - name: benchmark hla_aa pipeline
        run: |
          script="inst/benchmark/workflow_hla_aa.R"
          in_prefix="inst/benchmark/hla_calls_ABC"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/workflow_hla_aa_3_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done
          in_prefix="inst/benchmark/hla_calls_ABCDMADMB"
          for size in "100" "1000" "10000" "100000"; do
            for j in 1 2 3; do
              log_err="inst/benchmark/workflow_hla_aa_5_${size}_err.log"
              /usr/bin/time -v Rscript $script ${in_prefix}_${size}.tsv 2> >(tee -a ${log_err} >&2)
            done
          done

      - name: collect results
        run: |
          grep -e "wall clock" -e "Maximum resident set size" inst/benchmark/*_err.log \
            | sed -e "s|inst/benchmark/\(.*\)_\([0-9]\)_\([0-9]*\)_err.log.*: |\1\t\2\t\3\t|" \
            | tee >&2

